// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: proto/HI.proto

package HI

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HI_Call_FullMethodName     = "/HI.HI/Call"
	HI_Stream_FullMethodName   = "/HI.HI/Stream"
	HI_PingPong_FullMethodName = "/HI.HI/PingPong"
)

// HIClient is the client API for HI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HIClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (HI_StreamClient, error)
	PingPong(ctx context.Context, opts ...grpc.CallOption) (HI_PingPongClient, error)
}

type hIClient struct {
	cc grpc.ClientConnInterface
}

func NewHIClient(cc grpc.ClientConnInterface) HIClient {
	return &hIClient{cc}
}

func (c *hIClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, HI_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hIClient) Stream(ctx context.Context, in *StreamingRequest, opts ...grpc.CallOption) (HI_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HI_ServiceDesc.Streams[0], HI_Stream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hIStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HI_StreamClient interface {
	Recv() (*StreamingResponse, error)
	grpc.ClientStream
}

type hIStreamClient struct {
	grpc.ClientStream
}

func (x *hIStreamClient) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIClient) PingPong(ctx context.Context, opts ...grpc.CallOption) (HI_PingPongClient, error) {
	stream, err := c.cc.NewStream(ctx, &HI_ServiceDesc.Streams[1], HI_PingPong_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hIPingPongClient{stream}
	return x, nil
}

type HI_PingPongClient interface {
	Send(*Ping) error
	Recv() (*Pong, error)
	grpc.ClientStream
}

type hIPingPongClient struct {
	grpc.ClientStream
}

func (x *hIPingPongClient) Send(m *Ping) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hIPingPongClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HIServer is the server API for HI service.
// All implementations must embed UnimplementedHIServer
// for forward compatibility
type HIServer interface {
	Call(context.Context, *Request) (*Response, error)
	Stream(*StreamingRequest, HI_StreamServer) error
	PingPong(HI_PingPongServer) error
	mustEmbedUnimplementedHIServer()
}

// UnimplementedHIServer must be embedded to have forward compatible implementations.
type UnimplementedHIServer struct {
}

func (UnimplementedHIServer) Call(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedHIServer) Stream(*StreamingRequest, HI_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedHIServer) PingPong(HI_PingPongServer) error {
	return status.Errorf(codes.Unimplemented, "method PingPong not implemented")
}
func (UnimplementedHIServer) mustEmbedUnimplementedHIServer() {}

// UnsafeHIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HIServer will
// result in compilation errors.
type UnsafeHIServer interface {
	mustEmbedUnimplementedHIServer()
}

func RegisterHIServer(s grpc.ServiceRegistrar, srv HIServer) {
	s.RegisterService(&HI_ServiceDesc, srv)
}

func _HI_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HI_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HI_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIServer).Stream(m, &hIStreamServer{stream})
}

type HI_StreamServer interface {
	Send(*StreamingResponse) error
	grpc.ServerStream
}

type hIStreamServer struct {
	grpc.ServerStream
}

func (x *hIStreamServer) Send(m *StreamingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HI_PingPong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HIServer).PingPong(&hIPingPongServer{stream})
}

type HI_PingPongServer interface {
	Send(*Pong) error
	Recv() (*Ping, error)
	grpc.ServerStream
}

type hIPingPongServer struct {
	grpc.ServerStream
}

func (x *hIPingPongServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hIPingPongServer) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HI_ServiceDesc is the grpc.ServiceDesc for HI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HI.HI",
	HandlerType: (*HIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _HI_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _HI_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingPong",
			Handler:       _HI_PingPong_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/HI.proto",
}
