// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: rpc.proto

package rrr

import (
	context "context"

	service "go_basic/day37/proto/service"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Caculate_Add_FullMethodName = "/Caculate/Add"
)

// CaculateClient is the client API for Caculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaculateClient interface {
	Add(ctx context.Context, in *service.Reqc, opts ...grpc.CallOption) (*service.Resc, error)
}

type caculateClient struct {
	cc grpc.ClientConnInterface
}

func NewCaculateClient(cc grpc.ClientConnInterface) CaculateClient {
	return &caculateClient{cc}
}

func (c *caculateClient) Add(ctx context.Context, in *service.Reqc, opts ...grpc.CallOption) (*service.Resc, error) {
	out := new(service.Resc)
	err := c.cc.Invoke(ctx, Caculate_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaculateServer is the server API for Caculate service.
// All implementations must embed UnimplementedCaculateServer
// for forward compatibility
type CaculateServer interface {
	Add(context.Context, *service.Reqc) (*service.Resc, error)
	mustEmbedUnimplementedCaculateServer()
}

// UnimplementedCaculateServer must be embedded to have forward compatible implementations.
type UnimplementedCaculateServer struct {
}

func (UnimplementedCaculateServer) Add(context.Context, *service.Reqc) (*service.Resc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCaculateServer) mustEmbedUnimplementedCaculateServer() {}

// UnsafeCaculateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaculateServer will
// result in compilation errors.
type UnsafeCaculateServer interface {
	mustEmbedUnimplementedCaculateServer()
}

func RegisterCaculateServer(s grpc.ServiceRegistrar, srv CaculateServer) {
	s.RegisterService(&Caculate_ServiceDesc, srv)
}

func _Caculate_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(service.Reqc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculateServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Caculate_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculateServer).Add(ctx, req.(*service.Reqc))
	}
	return interceptor(ctx, in, info, handler)
}

// Caculate_ServiceDesc is the grpc.ServiceDesc for Caculate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Caculate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Caculate",
	HandlerType: (*CaculateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Caculate_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
