// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: servic.proto

package servic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Talk_SayHello_FullMethodName = "/Talk/SayHello"
	Talk_SayName_FullMethodName  = "/Talk/SayName"
)

// TalkClient is the client API for Talk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalkClient interface {
	SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	SayName(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type talkClient struct {
	cc grpc.ClientConnInterface
}

func NewTalkClient(cc grpc.ClientConnInterface) TalkClient {
	return &talkClient{cc}
}

func (c *talkClient) SayHello(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, Talk_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talkClient) SayName(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, Talk_SayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalkServer is the server API for Talk service.
// All implementations must embed UnimplementedTalkServer
// for forward compatibility
type TalkServer interface {
	SayHello(context.Context, *Req) (*Resp, error)
	SayName(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedTalkServer()
}

// UnimplementedTalkServer must be embedded to have forward compatible implementations.
type UnimplementedTalkServer struct {
}

func (UnimplementedTalkServer) SayHello(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTalkServer) SayName(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayName not implemented")
}
func (UnimplementedTalkServer) mustEmbedUnimplementedTalkServer() {}

// UnsafeTalkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalkServer will
// result in compilation errors.
type UnsafeTalkServer interface {
	mustEmbedUnimplementedTalkServer()
}

func RegisterTalkServer(s grpc.ServiceRegistrar, srv TalkServer) {
	s.RegisterService(&Talk_ServiceDesc, srv)
}

func _Talk_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talk_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServer).SayHello(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talk_SayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalkServer).SayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Talk_SayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalkServer).SayName(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Talk_ServiceDesc is the grpc.ServiceDesc for Talk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Talk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Talk",
	HandlerType: (*TalkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Talk_SayHello_Handler,
		},
		{
			MethodName: "SayName",
			Handler:    _Talk_SayName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "servic.proto",
}
